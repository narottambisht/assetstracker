{
  "swagger": "2.0",
  "info": {
    "description": "This is documentation for my pet project completely on MERN Stack. For tracking a indivisual's assets",
    "version": "1.0.0",
    "title": "Assetstracker API docs",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "support@assetstracker.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apikey",
      "name": "Authorization",
      "in": "header",
      "bearerFormat": "JWT",
      "description": "Add Bearer before the token."
    }
  },
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Signup a new User/Agent",
        "description": "Endpoint to signup a new user/agent.",
        "operationId": "signup",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "formData",
            "description": "User/Agent userName to signup (has to be unique)",
            "required": true
          },
          {
            "in": "formData",
            "name": "email",
            "description": "User/Agent email to signup (has to be unique)",
            "required": true
          },
          {
            "in": "formData",
            "name": "role",
            "description": "User/Agent role to signup",
            "required": true,
            "items": {
              "type": "String",
              "enum": [
                "USER",
                "AGENT",
                "ADMIN"
              ],
              "default": "USER"
            }
          },
          {
            "in": "formData",
            "name": "password",
            "description": "Enter a valid password to signup",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Registration Successful"
          },
          "422": {
            "description": "Validation Failed / User exists with same email or username"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login a User/Agent into the application.",
        "description": "Endpoint to login users/agents.",
        "operationId": "login",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "email",
            "description": "User/Agent email to login into the application.",
            "required": true
          },
          {
            "in": "formData",
            "name": "password",
            "description": "Enter a password to login.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Login Successful. Will return the user object and an JWT token for further requests"
          },
          "422": {
            "description": "Validation Failed / User doesn't exist with same email / password."
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/client/add": {
      "put": {
        "tags": [
          "Client"
        ],
        "summary": "Agent can create a client under his account",
        "description": "Agent can create a client with his agentId mentioned in that user. If the logged in user is not an agent, the application will return an error.",
        "operationId": "addClient",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "firstName",
            "description": "User's firstName that the agent is trying to add.",
            "required": true
          },
          {
            "in": "formData",
            "name": "lastName",
            "description": "User's lastName that the agent is trying to add.",
            "required": true
          },
          {
            "in": "formData",
            "name": "email",
            "description": "User's email that the agent is trying to add ( has to be unique ). Username will be created from this email only using the alphabets before @ symbol. Password will also be same as username",
            "required": true
          },
          {
            "in": "formData",
            "name": "mobileNumber",
            "description": "Mobile number for the agent's client.",
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Client's Address",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Login Successful. Will return the user object and an JWT token for further requests"
          },
          "422": {
            "description": "Validation Failed / User doesn't exist with same email / password."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/updateprofile": {
      "put": {
        "tags": [
          "Miscellaneous"
        ],
        "summary": "Endpoint to update the user's profile",
        "description": "There are some details that get filled up while user sign's up. But if he want to update more details in the settings section of the front end he can do that using this settings page and FE can use this endpoint to do that.",
        "operationId": "updateProfile",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "firstName",
            "description": "User's firstName to update",
            "required": true
          },
          {
            "in": "formData",
            "name": "lastName",
            "description": "User's lastName to update.",
            "required": true
          },
          {
            "in": "formData",
            "name": "mobileNumber",
            "description": "Mobile number to update.",
            "required": true
          },
          {
            "in": "formData",
            "name": "address",
            "description": "Client's Address to update",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Update Successful, the new updated user object will be returned in the response."
          },
          "400": {
            "description": "Update failed, due to validation error or some other error."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  }
}